<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[tsingfei's blog]]></title>
  <subtitle><![CDATA[积跬步以至千里]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://tsingfei.github.com/"/>
  <updated>2015-06-02T07:34:25.439Z</updated>
  <id>http://tsingfei.github.com/</id>
  
  <author>
    <name><![CDATA[tsingfei]]></name>
    <email><![CDATA[tsingfei@gmail.com]]></email>
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Gradle下载jar包源码问题]]></title>
    <link href="http://tsingfei.github.com/2015/06/02/gradle%E4%B8%8B%E8%BD%BDjar%E5%8C%85%E6%BA%90%E7%A0%81%E9%97%AE%E9%A2%98/"/>
    <id>http://tsingfei.github.com/2015/06/02/gradle下载jar包源码问题/</id>
    <published>2015-06-02T07:00:47.000Z</published>
    <updated>2015-06-02T07:33:52.000Z</updated>
    <content type="html"><![CDATA[<p>使用Gradle构建和依赖管理工具，build.gradle 如下：</p>
<figure class="highlight Groovy"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
</pre></td><td class="code"><pre>apply plugin: <span class="string">'war'</span>
apply plugin: <span class="string">'com.bmuschko.tomcat'</span>
apply plugin: <span class="string">'java'</span>
apply plugin: <span class="string">'propdeps'</span>
apply plugin: <span class="string">'propdeps-maven'</span>
apply plugin: <span class="string">'propdeps-idea'</span>
apply plugin: <span class="string">'propdeps-eclipse'</span>
apply plugin: <span class="string">'eclipse-wtp'</span>
apply plugin: <span class="string">'idea'</span>
apply plugin: <span class="string">'rebel'</span>
apply plugin: <span class="string">'jetty'</span>

println <span class="string">"PROJECT="</span> + project.name

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()

        maven { url <span class="string">'http://repo.spring.io/plugins-release'</span> }
    }

    dependencies {
        classpath <span class="string">'com.bmuschko:gradle-tomcat-plugin:2.0'</span>
        classpath <span class="string">'org.springframework.build.gradle:propdeps-plugin:0.0.5'</span>
        classpath <span class="string">'org.zeroturnaround:gradle-jrebel-plugin:1.1.2'</span>
    }
}

repositories {
    mavenLocal()
    mavenCentral()

    maven { url <span class="string">'http://repo.spring.io/plugins-release'</span> }
}


ext {
    springVersion = <span class="string">"4.0.5.RELEASE"</span>
    springSecurityVersion = <span class="string">"3.2.5.RELEASE"</span>
    thymeleafVersion = <span class="string">"2.1.3.RELEASE"</span>
    tomcatVersion = <span class="string">"7.0.54"</span>
}

dependencies {
    compile <span class="string">"org.springframework:spring-core:<span class="variable">$springVersion</span>"</span>
    compile <span class="string">"org.springframework:spring-webmvc:<span class="variable">$springVersion</span>"</span>
    compile <span class="string">"org.springframework:spring-orm:<span class="variable">$springVersion</span>"</span>
    compile <span class="string">"org.springframework:spring-context-support:<span class="variable">$springVersion</span>"</span>

    compile <span class="string">"org.springframework.security:spring-security-web:<span class="variable">$springSecurityVersion</span>"</span>
    compile <span class="string">"org.springframework.security:spring-security-config:<span class="variable">$springSecurityVersion</span>"</span>
    compile <span class="string">"org.springframework.security:spring-security-taglibs:<span class="variable">$springSecurityVersion</span>"</span>

    compile <span class="string">"org.thymeleaf:thymeleaf:<span class="variable">$thymeleafVersion</span>"</span>
    compile <span class="string">"org.thymeleaf:thymeleaf-spring4:<span class="variable">$thymeleafVersion</span>"</span>
    compile <span class="string">"org.thymeleaf.extras:thymeleaf-extras-springsecurity3:2.1.1.RELEASE"</span>
    compile <span class="string">"nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect:1.2.7"</span>

    compile <span class="string">"org.hibernate:hibernate-entitymanager:4.3.5.Final"</span>
    compile <span class="string">"org.hibernate:hibernate-validator:4.3.1.Final"</span>
    compile <span class="string">"mysql:mysql-connector-java:5.1.30"</span>
    compile <span class="string">"c3p0:c3p0:0.9.1.2"</span>

    compile <span class="string">"joda-time:joda-time:2.4"</span>

    compile <span class="string">"org.slf4j:slf4j-api:1.7.5"</span>
    runtime <span class="string">"org.slf4j:slf4j-log4j12:1.7.5"</span>

    testCompile <span class="string">"org.springframework:spring-test:<span class="variable">$springVersion</span>"</span>
    testCompile <span class="string">"junit:junit:4.11"</span>
    testCompile <span class="string">"org.mockito:mockito-core:1.9.5"</span>
    testCompile <span class="string">"org.hamcrest:hamcrest-library:1.3"</span>

    providedCompile <span class="string">"javax.servlet:javax.servlet-api:3.0.1"</span>

    tomcat <span class="string">"org.apache.tomcat.embed:tomcat-embed-core:<span class="variable">$tomcatVersion</span>"</span>,
            <span class="string">"org.apache.tomcat.embed:tomcat-embed-logging-juli:<span class="variable">$tomcatVersion</span>"</span>
    tomcat(<span class="string">"org.apache.tomcat.embed:tomcat-embed-jasper:<span class="variable">$tomcatVersion</span>"</span>) {
        exclude group: <span class="string">'org.eclipse.jdt.core.compiler'</span>, module: <span class="string">'ecj'</span>
    }
}

test {
    testLogging {
        events <span class="string">'started'</span>, <span class="string">'passed'</span>
    }
}

def appName = <span class="string">'webapp'</span>
def appWarName = appName + <span class="string">'.war'</span>
def tomcatWebAppsHome = <span class="string">'/usr/local/tomcat7/webapps'</span>

task <span class="function"><span class="title">deployWar</span></span>() {
    <span class="keyword">do</span>Last {
        delete tomcatWebAppsHome + <span class="string">"/"</span> + appName

        logger.lifecycle(<span class="string">"Gonna deploy <span class="variable">${appWarName}</span> into <span class="variable">${tomcatWebAppsHome}</span> from <span class="variable">${libsDir.getPath()}</span>"</span>)

        copy {
            from libsDir
            into <span class="string">"<span class="variable">${tomcatWebAppsHome}</span>"</span>
            include <span class="string">"<span class="variable">${appWarName}</span>"</span>
        }
    }
}

rebel {
    alwaysGenerate = <span class="literal">true</span>
    showGenerated = <span class="literal">true</span>
}

war.dependsOn(generateRebel)
deployWar.dependsOn(war)

task wrapper(<span class="built_in">type</span>: Wrapper) { gradleVersion = <span class="string">'2.1'</span> }

tomcatRunWar.contextPath = <span class="string">''</span>
</pre></td></tr></table></figure>

<p>发现无法加载jar源码包，google之后发现了问题所在。参考解决方法：<a href="http://stackoverflow.com/questions/10156847/how-to-tell-gradle-to-download-all-the-source-jars" target="_blank">how-to-tell-gradle-to-download-all-the-source-jars</a></p>
<p><strong>原因</strong>：当在build.gradle中使用了mavenLocal()后，对于本地maven repo中已经存在的不包含源码和javadocs的jar包，gradle不会再去下载源码包。即使在build.gradle中配置eclipse.classpath.downloadJavadoc或者eclipse.classpath.downloadSources也不行。</p>
<p><strong>解决方法</strong>：删除<code>repositories</code>中的<code>mavenLocal()</code>，或者将其放在仓库列表最后。或者<a href="http://stackoverflow.com/questions/5780758/maven-always-download-sources-and-javadocs" target="_blank">设置maven始终下载源码包</a>，清空本地仓库(<code>(~/.m2/repository</code>)。</p>
]]></content>
    
    
      <category term="构建工具, 项目管理" scheme="http://tsingfei.github.com/tags/%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7,%20%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"/>
    
      <category term="BuildTool" scheme="http://tsingfei.github.com/categories/BuildTool/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[MySql添加新用户设置远程IP访问]]></title>
    <link href="http://tsingfei.github.com/2015/05/26/mysql-adduser-grantipconnect/"/>
    <id>http://tsingfei.github.com/2015/05/26/mysql-adduser-grantipconnect/</id>
    <published>2015-05-26T07:54:23.000Z</published>
    <updated>2015-06-02T07:01:21.000Z</updated>
    <content type="html"><![CDATA[<p>MySQL默认root账户可通过localhost和127.0.0.1进行访问，root账户其他IP无法访问。在mysql.user表中有用户的授权信息。<br>可用以下命令授权其他IP进行访问。</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="operator"><span class="keyword">GRANT</span> <span class="keyword">all</span> <span class="keyword">privileges</span> <span class="keyword">ON</span> *.* <span class="keyword">TO</span> <span class="string">'root'</span>@<span class="string">'%'</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">'password'</span>;</span>
</pre></td></tr></table></figure>

<p>如果不想让root被外界访问，那么需要创建一个用户，并授权</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="operator"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> mysql.<span class="keyword">user</span>(HOST,<span class="keyword">USER</span>,PASSWORD) <span class="keyword">values</span> (<span class="string">'希望能访问的客户端IP'</span>,<span class="string">'user'</span>,password(<span class="string">'pass'</span>));</span>
</pre></td></tr></table></figure>

<p>以上命令会出现错误<code>ERROR 1364 Field &#39;ssl_cipher&#39; doesn&#39;t have a default value</code>，解决步骤如下：</p>
<ol>
<li>使用以下命令增加用户</li>
</ol>
<figure class="highlight sql"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="operator"><span class="keyword">GRANT</span> USEAGE <span class="keyword">ON</span> *.* <span class="keyword">TO</span> <span class="string">'username'</span>@<span class="string">'localhost'</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">'password'</span> <span class="keyword">WITH</span> <span class="keyword">GRANT</span> <span class="keyword">OPTION</span>;</span>
</pre></td></tr></table></figure>

<p>‘username’为要授权的用户名，比如clientuser,<br>‘password’为clientuser的密码,<br>‘localhost’可改为%，表示所有其他IP均可登录.</p>
<ol>
<li>然后对所建的用户进行授权：</li>
</ol>
<figure class="highlight sql"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="operator"><span class="keyword">GRANT</span> <span class="keyword">SELECT</span>, <span class="keyword">INSERT</span>, <span class="keyword">UPDATE</span>, <span class="keyword">DELETE</span>, <span class="keyword">CREATE</span>, <span class="keyword">DROP</span> <span class="keyword">ON</span> tablename.* <span class="keyword">TO</span> <span class="string">'username'</span>@<span class="string">'localhost'</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">'password'</span>;</span>
</pre></td></tr></table></figure>

<p>语句中的权限可根据实际进行确定</p>
<ol>
<li>生效授权，创建完毕</li>
</ol>
<figure class="highlight sql"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>FLUSH PRIVILIEGES
</pre></td></tr></table></figure>

]]></content>
    
    
      <category term="博客" scheme="http://tsingfei.github.com/tags/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="数据库" scheme="http://tsingfei.github.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="MySql" scheme="http://tsingfei.github.com/tags/MySql/"/>
    
      <category term="database" scheme="http://tsingfei.github.com/categories/database/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[模块的封装性分析]]></title>
    <link href="http://tsingfei.github.com/2014/08/09/encapsulation-of-module/"/>
    <id>http://tsingfei.github.com/2014/08/09/encapsulation-of-module/</id>
    <published>2014-08-09T15:50:20.000Z</published>
    <updated>2014-08-09T16:01:56.000Z</updated>
    <content type="html"><![CDATA[<h2 id="引子">引子</h2>
<p>最近看<a href="http://book.douban.com/subject/25770095/" target="_blank">《Java Application Architecture-Modularity Patterns with Examples Using OSGi-中文译名Java应用架构设计》</a>时，在物理模块的封装设计方面深受启发。市面上很多书都是介绍类的封装、访问性控制、逻辑设计，但是关于物理模块的设计的书并不多见，这本书是这方面的好书，有Bob大叔推荐作序。同时此书推荐的一本老书<a href="http://book.douban.com/subject/1127940/" target="_blank">《Large-Scale C++ Software Design》</a>也是这方面的经典好书。就像这本书所说的<code>缺乏物理设计的逻辑设计并不会带来预期的影响</code>，深有同感。</p>
<h2 id="问题描述">问题描述</h2>
<p>讨论一个和参考资料[1]中3.4节、[2]、[3]中描述的问题相同的简化问题。根据面向接口编程的理念，提供服务的模块只暴露服务接口，隐藏实现。客户端模块以接口访问服务端模块的服务。客户端模块中不能出现任何具体实现类的引用耦合。这样便于以后改变服务端模块实现的同时不影响客户端模块。我们希望具体实现类对客户端模块不可见。这样在提供服务端模块时强制以接口公开服务。</p>
<h2 id="解决方法">解决方法</h2>
<p>[1]中采用Spring框架注入实现类，[3]中描述了采用ServiceLoader和META-INF注入实现类。以下以[2]中类似的代码为例介绍Java的方法，此处没有采用框架，仅仅是用了一个简单的工厂控制实现类的注入。并和.NET的解决方法对比。这里采用参考资料[1]中的模块定义，Java定义jar文件为物理模块单元，.NET定义程序集dll文件为物理模块单元，这也是我们平时常用引用第三方类库的方法。</p>
<h3 id="Java的解决方法">Java的解决方法</h3>
<p>服务接口</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre>package org.p2.helloworld;

<span class="keyword">public</span> <span class="keyword">interface</span> HelloService {  
<span class="keyword">void</span> sayHello(String name);  
}
</pre></td></tr></table></figure>

<p>实现类</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
</pre></td><td class="code"><pre><span class="keyword">package</span> org.p2.helloworld.impl;

<span class="keyword">import</span> org.p2.helloworld.HelloService;

<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServiceImpl</span> <span class="keyword">implements</span> <span class="title">HelloService</span> {</span>
<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span>(String name){
    System.out.println(<span class="string">"Hello,"</span> + name);
}
}
</pre></td></tr></table></figure>

<p>简单的工厂控制实现</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
</pre></td><td class="code"><pre><span class="keyword">package</span> org.p2.helloworld;

<span class="keyword">import</span> org.p2.helloworld.impl.HelloServiceImpl;

<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloFactory</span> {</span>
	<span class="keyword">public</span> <span class="keyword">static</span> HelloService <span class="title">getHelloService</span>() {
		<span class="keyword">return</span> <span class="keyword">new</span> HelloServiceImpl();
	}
}
</pre></td></tr></table></figure>

<p>服务模块单元provider.jar包含以上几个包，客户端client.jar内容如下。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre><span class="keyword">package</span> org.p1.helloworld.main

<span class="keyword">import</span> org.p2.helloworld.*;

<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> {</span>
<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(String[] args) {
    HelloService helloService = HelloFactory.getHelloService();
    helloService.sayHello(<span class="string">"World"</span>); 
}
}
</pre></td></tr></table></figure>

<p>以上实现由于将接口和实现类放在了不同的包中，所以实现类可见性必须为public。如果将实现类和接口放在同一个包中，则实现类可见性可设置为仅包可见。实现类代码如下，其他类同上，可实现provider.jar仅向外暴露接口。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre><span class="class"><span class="keyword">class</span> <span class="title">HelloServiceImpl</span> <span class="inheritance"><span class="keyword">implements</span></span> <span class="title">HelloService</span> {</span>
<span class="keyword">public</span> <span class="keyword">void</span> sayHello(String name){
    System.out.println(<span class="string">"Hello,"</span> + name);
}
}
</pre></td></tr></table></figure>

<h3 id="-NET解决方案讨论">.NET解决方案讨论</h3>
<p>服务接口</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
</pre></td><td class="code"><pre>namespace Provider
{
    <span class="keyword">public</span> <span class="keyword">interface</span> HelloService
    {
        <span class="keyword">void</span> SayHello(<span class="keyword">string</span> name);
    }
}
</pre></td></tr></table></figure>

<p>实现</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre>namespace Provider.Impl
{
    <span class="keyword">internal</span> <span class="keyword">class</span> HelloServiceImpl : HelloService
    {
        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SayHello</span>(<span class="keyword">string</span> name)
        {
            Console.WriteLine(<span class="string">"Hello,"</span> + name);
        }
    }
}
</pre></td></tr></table></figure>

<p>工厂类</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="code"><pre><span class="keyword">using</span> Provider.Impl;
namespace Provider
{
    <span class="keyword">public</span> <span class="keyword">class</span> HelloServiceFactory
    {
        <span class="keyword">public</span> <span class="keyword">static</span> HelloService <span class="title">GetHelloService</span>()
        {
            <span class="keyword">return</span> <span class="keyword">new</span> HelloServiceImpl();
        }
    }
}
</pre></td></tr></table></figure>

<p>以上为服务模块单元provider.dll包含内容，.NET下可实现将实现类和接口放在不同命名空间下，同时向外仅暴露接口。</p>
<h2 id="分析讨论">分析讨论</h2>
<p>以上将HelloService接口和实现类HelloServiceImpl放在了同一个物理provider.jar下的两个包下，以provider.jar类库形式提供给客户端。无论是采用[1]中的Spring框架注入实现类，还是[3]中的方法注入实现类，如果将实现类和接口放在不同包中，都必须将HelloServiceImpl的包可见性设置为public。这样导致了一旦客户端模块引用了服务端模块并导入包，则可直接实例化实现类。这就是参考资料里所说的<code>Java没有提供将包或类定义为模块作用域的方法，导致一个模块中的类总是能够访问另一个模块的实现细节</code>，这也OSGi这样的框架致力解决的问题。如果将实现类和接口放在一个包中则可以向外仅暴露接口，但同一物理模块jar下的其他包无法使用实现类。<br>对比.NET下的解决方法，.NET下可以将实现类设置为internal，物理模块内可见，对引用此模块的客户端程序不可见。而Java的包可见性有逻辑方面和物理设计方面的限制，并不是很纯粹。因此java的包和.NET的命名空间有很大不同。个人猜测这可能和跨平台有关，毕竟物理模块和具体平台有关。结合实际的应用情况，确实需要物理方面的可见性控制，这样才能提供更好的封装性。物理模块的组织设计及良好的封装性确实是这本书给我最大的启示。</p>
<h2 id="参考资料">参考资料</h2>
<ol>
<li><a href="http://book.douban.com/subject/25770095/" target="_blank">Java Application Architecture-Modularity Patterns with Examples Using OSGi, Kirk Knoernschild, 中文译名Java应用架构设计-模块化与OSGi</a></li>
<li><a href="http://osgi.com.cn/article/7289219" target="_blank">OSGi中文社区，OSGi入门篇：模块层</a></li>
<li><a href="http://v.youku.com/v_show/id_XNDE1NzU0OTY0.html" target="_blank">OSGi:简介，优酷jevon_fu</a></li>
</ol>
]]></content>
    
    
      <category term="博客" scheme="http://tsingfei.github.com/tags/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="模块化" scheme="http://tsingfei.github.com/tags/%E6%A8%A1%E5%9D%97%E5%8C%96/"/>
    
      <category term="架构设计" scheme="http://tsingfei.github.com/tags/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="读书笔记" scheme="http://tsingfei.github.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="module" scheme="http://tsingfei.github.com/categories/module/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[人机交互设计方面的图书资料]]></title>
    <link href="http://tsingfei.github.com/2014/04/09/interaction-design-books/"/>
    <id>http://tsingfei.github.com/2014/04/09/interaction-design-books/</id>
    <published>2014-04-09T01:41:07.000Z</published>
    <updated>2014-08-09T15:59:06.000Z</updated>
    <content type="html"><![CDATA[<p>由于以前编程主要侧重功能实现，对交互设计方面的东西了解非常少，所以最近恶补一下交互设计方面的常识。整理了一些这方面的书籍。</p>
<ol>
<li><strong>Designing Interface</strong>-<em>Patterns for Effective Interaction Design</em></li>
<li><strong>Web Anatomy</strong>-<em>Interaction Design Frameworks thatWork</em></li>
<li><strong>Web Navigation Design</strong></li>
<li><strong>Designing the Moment</strong>-<em>Web Interface Design Concepts in action</em></li>
</ol>
]]></content>
    
    
      <category term="博客" scheme="http://tsingfei.github.com/tags/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="交互设计" scheme="http://tsingfei.github.com/tags/%E4%BA%A4%E4%BA%92%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="书单" scheme="http://tsingfei.github.com/tags/%E4%B9%A6%E5%8D%95/"/>
    
      <category term="interaction design" scheme="http://tsingfei.github.com/categories/interaction%20design/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[代理键和业务键对比]]></title>
    <link href="http://tsingfei.github.com/2014/04/08/business-key-vs-surrogate-key/"/>
    <id>http://tsingfei.github.com/2014/04/08/business-key-vs-surrogate-key/</id>
    <published>2014-04-08T02:05:12.000Z</published>
    <updated>2015-05-26T07:56:30.000Z</updated>
    <content type="html"><![CDATA[<h2 id="参考资料:">参考资料:</h2>
<ol>
<li><strong>Java Persistence with Hibernate 2rd,CristianBauer</strong> </li>
<li><a href="http://en.wikipedia.org/wiki/Surrogate_key" target="_blank">surrogate key</a></li>
<li><a href="http://blog.sina.com.cn/s/blog_7f14264a01016im1.html" target="_blank">Business Key 和 Surrogate Key的区别</a></li>
<li><a href="http://hi.baidu.com/developers/item/d6c2a70eaf63766dd55a1166" target="_blank">代理键 surrogate key</a></li>
</ol>
<h2 id="关系数据库primary_key的选择">关系数据库primary key的选择</h2>
<p>参考资料[1]（中文书名为<code>Hibernate 实战</code>）解决了长久以来困扰我的关系数据库选择主键的问题。</p>
<p>在设计关系数据库主键时，简单划分有以下两种方法：</p>
<pre><code>1.使用原业务中的主键作关系表的主键
2.新建无意义的主键列，原业务的主键作为关系表的一个属性
</code></pre><p>起一种称为<code>业务键（business key）</code>，这样导致更新主键列非常困难，给业务扩展带来障碍。<br>第二种称为<code>代理键（surrogate key）</code>，对用户没有意义，不呈现给用户，而只用作软件系统内部的数据标识。</p>
<p>代理键的选择方式也体现了关系数据库设计和业务的解耦，用作关系数据表联系的代理键不妨碍业务的扩展。</p>
]]></content>
    
    
      <category term="博客" scheme="http://tsingfei.github.com/tags/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="数据库" scheme="http://tsingfei.github.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="database" scheme="http://tsingfei.github.com/categories/database/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[第一篇博客]]></title>
    <link href="http://tsingfei.github.com/2014/03/26/my-new-post/"/>
    <id>http://tsingfei.github.com/2014/03/26/my-new-post/</id>
    <published>2014-03-26T10:00:45.000Z</published>
    <updated>2014-08-09T16:02:49.000Z</updated>
    <content type="html"><![CDATA[<p>第一篇博客,终于利用hexo,用github托管自己的博客.</p>
]]></content>
    
    
      <category term="博客" scheme="http://tsingfei.github.com/tags/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="生活" scheme="http://tsingfei.github.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="blog" scheme="http://tsingfei.github.com/categories/blog/"/>
    
  </entry>
  
</feed>
